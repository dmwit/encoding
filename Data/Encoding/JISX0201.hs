{- This file has been auto-generated. Do not edit it. -}
{-# LANGUAGE MagicHash,DeriveDataTypeable #-}
{- |

32	 = &#32; (32)

33	 = &#33; (33)

34	 = &#34; (34)

35	 = &#35; (35)

36	 = &#36; (36)

37	 = &#37; (37)

38	 = &#38; (38)

39	 = &#39; (39)

40	 = &#40; (40)

41	 = &#41; (41)

42	 = &#42; (42)

43	 = &#43; (43)

44	 = &#44; (44)

45	 = &#45; (45)

46	 = &#46; (46)

47	 = &#47; (47)

48	 = &#48; (48)

49	 = &#49; (49)

50	 = &#50; (50)

51	 = &#51; (51)

52	 = &#52; (52)

53	 = &#53; (53)

54	 = &#54; (54)

55	 = &#55; (55)

56	 = &#56; (56)

57	 = &#57; (57)

58	 = &#58; (58)

59	 = &#59; (59)

60	 = &#60; (60)

61	 = &#61; (61)

62	 = &#62; (62)

63	 = &#63; (63)

64	 = &#64; (64)

65	 = &#65; (65)

66	 = &#66; (66)

67	 = &#67; (67)

68	 = &#68; (68)

69	 = &#69; (69)

70	 = &#70; (70)

71	 = &#71; (71)

72	 = &#72; (72)

73	 = &#73; (73)

74	 = &#74; (74)

75	 = &#75; (75)

76	 = &#76; (76)

77	 = &#77; (77)

78	 = &#78; (78)

79	 = &#79; (79)

80	 = &#80; (80)

81	 = &#81; (81)

82	 = &#82; (82)

83	 = &#83; (83)

84	 = &#84; (84)

85	 = &#85; (85)

86	 = &#86; (86)

87	 = &#87; (87)

88	 = &#88; (88)

89	 = &#89; (89)

90	 = &#90; (90)

91	 = &#91; (91)

92	 = &#165; (165)

93	 = &#93; (93)

94	 = &#94; (94)

95	 = &#95; (95)

96	 = &#96; (96)

97	 = &#97; (97)

98	 = &#98; (98)

99	 = &#99; (99)

100	 = &#100; (100)

101	 = &#101; (101)

102	 = &#102; (102)

103	 = &#103; (103)

104	 = &#104; (104)

105	 = &#105; (105)

106	 = &#106; (106)

107	 = &#107; (107)

108	 = &#108; (108)

109	 = &#109; (109)

110	 = &#110; (110)

111	 = &#111; (111)

112	 = &#112; (112)

113	 = &#113; (113)

114	 = &#114; (114)

115	 = &#115; (115)

116	 = &#116; (116)

117	 = &#117; (117)

118	 = &#118; (118)

119	 = &#119; (119)

120	 = &#120; (120)

121	 = &#121; (121)

122	 = &#122; (122)

123	 = &#123; (123)

124	 = &#124; (124)

125	 = &#125; (125)

126	 = &#8254; (8254)

161	 = &#65377; (65377)

162	 = &#65378; (65378)

163	 = &#65379; (65379)

164	 = &#65380; (65380)

165	 = &#65381; (65381)

166	 = &#65382; (65382)

167	 = &#65383; (65383)

168	 = &#65384; (65384)

169	 = &#65385; (65385)

170	 = &#65386; (65386)

171	 = &#65387; (65387)

172	 = &#65388; (65388)

173	 = &#65389; (65389)

174	 = &#65390; (65390)

175	 = &#65391; (65391)

176	 = &#65392; (65392)

177	 = &#65393; (65393)

178	 = &#65394; (65394)

179	 = &#65395; (65395)

180	 = &#65396; (65396)

181	 = &#65397; (65397)

182	 = &#65398; (65398)

183	 = &#65399; (65399)

184	 = &#65400; (65400)

185	 = &#65401; (65401)

186	 = &#65402; (65402)

187	 = &#65403; (65403)

188	 = &#65404; (65404)

189	 = &#65405; (65405)

190	 = &#65406; (65406)

191	 = &#65407; (65407)

192	 = &#65408; (65408)

193	 = &#65409; (65409)

194	 = &#65410; (65410)

195	 = &#65411; (65411)

196	 = &#65412; (65412)

197	 = &#65413; (65413)

198	 = &#65414; (65414)

199	 = &#65415; (65415)

200	 = &#65416; (65416)

201	 = &#65417; (65417)

202	 = &#65418; (65418)

203	 = &#65419; (65419)

204	 = &#65420; (65420)

205	 = &#65421; (65421)

206	 = &#65422; (65422)

207	 = &#65423; (65423)

208	 = &#65424; (65424)

209	 = &#65425; (65425)

210	 = &#65426; (65426)

211	 = &#65427; (65427)

212	 = &#65428; (65428)

213	 = &#65429; (65429)

214	 = &#65430; (65430)

215	 = &#65431; (65431)

216	 = &#65432; (65432)

217	 = &#65433; (65433)

218	 = &#65434; (65434)

219	 = &#65435; (65435)

220	 = &#65436; (65436)

221	 = &#65437; (65437)

222	 = &#65438; (65438)

223	 = &#65439; (65439)
 -}
module Data.Encoding.JISX0201(JISX0201(..)) where

import Data.Encoding.Base
import Data.Encoding.ByteSource
import Data.Encoding.ByteSink
import Data.Encoding.Exception
import Data.CharMap
import Data.Array.Static
import Data.Map.Static
import Control.Throws
import Prelude hiding (lookup)
import Data.Word

import Data.Typeable

data JISX0201 = JISX0201
  deriving (Show,Eq,Typeable)

decoding_array_JISX0201 = StaticArray (32) (223) "\32\0\0\0\33\0\0\0\34\0\0\0\35\0\0\0\36\0\0\0\37\0\0\0\38\0\0\0\39\0\0\0\40\0\0\0\41\0\0\0\42\0\0\0\43\0\0\0\44\0\0\0\45\0\0\0\46\0\0\0\47\0\0\0\48\0\0\0\49\0\0\0\50\0\0\0\51\0\0\0\52\0\0\0\53\0\0\0\54\0\0\0\55\0\0\0\56\0\0\0\57\0\0\0\58\0\0\0\59\0\0\0\60\0\0\0\61\0\0\0\62\0\0\0\63\0\0\0\64\0\0\0\65\0\0\0\66\0\0\0\67\0\0\0\68\0\0\0\69\0\0\0\70\0\0\0\71\0\0\0\72\0\0\0\73\0\0\0\74\0\0\0\75\0\0\0\76\0\0\0\77\0\0\0\78\0\0\0\79\0\0\0\80\0\0\0\81\0\0\0\82\0\0\0\83\0\0\0\84\0\0\0\85\0\0\0\86\0\0\0\87\0\0\0\88\0\0\0\89\0\0\0\90\0\0\0\91\0\0\0\165\0\0\0\93\0\0\0\94\0\0\0\95\0\0\0\96\0\0\0\97\0\0\0\98\0\0\0\99\0\0\0\100\0\0\0\101\0\0\0\102\0\0\0\103\0\0\0\104\0\0\0\105\0\0\0\106\0\0\0\107\0\0\0\108\0\0\0\109\0\0\0\110\0\0\0\111\0\0\0\112\0\0\0\113\0\0\0\114\0\0\0\115\0\0\0\116\0\0\0\117\0\0\0\118\0\0\0\119\0\0\0\120\0\0\0\121\0\0\0\122\0\0\0\123\0\0\0\124\0\0\0\125\0\0\0\62\32\0\0\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\97\255\0\0\98\255\0\0\99\255\0\0\100\255\0\0\101\255\0\0\102\255\0\0\103\255\0\0\104\255\0\0\105\255\0\0\106\255\0\0\107\255\0\0\108\255\0\0\109\255\0\0\110\255\0\0\111\255\0\0\112\255\0\0\113\255\0\0\114\255\0\0\115\255\0\0\116\255\0\0\117\255\0\0\118\255\0\0\119\255\0\0\120\255\0\0\121\255\0\0\122\255\0\0\123\255\0\0\124\255\0\0\125\255\0\0\126\255\0\0\127\255\0\0\128\255\0\0\129\255\0\0\130\255\0\0\131\255\0\0\132\255\0\0\133\255\0\0\134\255\0\0\135\255\0\0\136\255\0\0\137\255\0\0\138\255\0\0\139\255\0\0\140\255\0\0\141\255\0\0\142\255\0\0\143\255\0\0\144\255\0\0\145\255\0\0\146\255\0\0\147\255\0\0\148\255\0\0\149\255\0\0\150\255\0\0\151\255\0\0\152\255\0\0\153\255\0\0\154\255\0\0\155\255\0\0\156\255\0\0\157\255\0\0\158\255\0\0\159\255\0\0"#

encoding_map_JISX0201 :: CharMap
encoding_map_JISX0201 = LeafMap1 (StaticMap (StaticArray (1) (158) "\62\32\0\0\95\0\0\0\128\255\0\0\63\0\0\0\111\0\0\0\112\255\0\0\144\255\0\0\47\0\0\0\79\0\0\0\103\0\0\0\119\0\0\0\104\255\0\0\120\255\0\0\136\255\0\0\152\255\0\0\39\0\0\0\55\0\0\0\71\0\0\0\87\0\0\0\99\0\0\0\107\0\0\0\115\0\0\0\123\0\0\0\100\255\0\0\108\255\0\0\116\255\0\0\124\255\0\0\132\255\0\0\140\255\0\0\148\255\0\0\156\255\0\0\35\0\0\0\43\0\0\0\51\0\0\0\59\0\0\0\67\0\0\0\75\0\0\0\83\0\0\0\91\0\0\0\97\0\0\0\101\0\0\0\105\0\0\0\109\0\0\0\113\0\0\0\117\0\0\0\121\0\0\0\125\0\0\0\98\255\0\0\102\255\0\0\106\255\0\0\110\255\0\0\114\255\0\0\118\255\0\0\122\255\0\0\126\255\0\0\130\255\0\0\134\255\0\0\138\255\0\0\142\255\0\0\146\255\0\0\150\255\0\0\154\255\0\0\158\255\0\0\33\0\0\0\37\0\0\0\41\0\0\0\45\0\0\0\49\0\0\0\53\0\0\0\57\0\0\0\61\0\0\0\65\0\0\0\69\0\0\0\73\0\0\0\77\0\0\0\81\0\0\0\85\0\0\0\89\0\0\0\94\0\0\0\96\0\0\0\98\0\0\0\100\0\0\0\102\0\0\0\104\0\0\0\106\0\0\0\108\0\0\0\110\0\0\0\112\0\0\0\114\0\0\0\116\0\0\0\118\0\0\0\120\0\0\0\122\0\0\0\124\0\0\0\165\0\0\0\97\255\0\0\99\255\0\0\101\255\0\0\103\255\0\0\105\255\0\0\107\255\0\0\109\255\0\0\111\255\0\0\113\255\0\0\115\255\0\0\117\255\0\0\119\255\0\0\121\255\0\0\123\255\0\0\125\255\0\0\127\255\0\0\129\255\0\0\131\255\0\0\133\255\0\0\135\255\0\0\137\255\0\0\139\255\0\0\141\255\0\0\143\255\0\0\145\255\0\0\147\255\0\0\149\255\0\0\151\255\0\0\153\255\0\0\155\255\0\0\157\255\0\0\159\255\0\0\32\0\0\0\34\0\0\0\36\0\0\0\38\0\0\0\40\0\0\0\42\0\0\0\44\0\0\0\46\0\0\0\48\0\0\0\50\0\0\0\52\0\0\0\54\0\0\0\56\0\0\0\58\0\0\0\60\0\0\0\62\0\0\0\64\0\0\0\66\0\0\0\68\0\0\0\70\0\0\0\72\0\0\0\74\0\0\0\76\0\0\0\78\0\0\0\80\0\0\0\82\0\0\0\84\0\0\0\86\0\0\0\88\0\0\0\90\0\0\0\93\0\0\0"#) (StaticArray (1) (158) "\126\95\192\63\111\176\208\47\79\103\119\168\184\200\216\39\55\71\87\99\107\115\123\164\172\180\188\196\204\212\220\35\43\51\59\67\75\83\91\97\101\105\109\113\117\121\125\162\166\170\174\178\182\186\190\194\198\202\206\210\214\218\222\33\37\41\45\49\53\57\61\65\69\73\77\81\85\89\94\96\98\100\102\104\106\108\110\112\114\116\118\120\122\124\92\161\163\165\167\169\171\173\175\177\179\181\183\185\187\189\191\193\195\197\199\201\203\205\207\209\211\213\215\217\219\221\223\32\34\36\38\40\42\44\46\48\50\52\54\56\58\60\62\64\66\68\70\72\74\76\78\80\82\84\86\88\90\93"#))

instance Encoding JISX0201 where
  decodeChar _ = do
    w <- fetchWord8
    (if w<32||w>223 then throwException $ IllegalCharacter $ fromIntegral w else return ())
    case decoding_array_JISX0201!w of
      Nothing -> throwException $ IllegalCharacter $ fromIntegral w
      Just c -> return c
  encodeChar _ c = mapEncode c encoding_map_JISX0201
  encodeable _ c = mapMember c encoding_map_JISX0201
